openapi: 3.0.0
info:
  title: Seknot Developer API
  version: 'beta'
  description: |
    SeknotのREST APIです。
    ClientID及びClientSecretは各ユーザーのユーザーページから取得してください。

servers:
  - url: 'https://api.seknot.net'
paths:
  /token:
    get:
      summary: サービストークンの一覧を取得する
      tags:
        - Token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
              examples: { }
      operationId: get-token-create
      description: サービスによって発行されたトークンの一覧を取得します
      x-internal: false
    parameters: [ ]
    post:
      summary: 新規トークンを発行する
      operationId: post-token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
      description: 指定された情報に基づいて新しくトークンを発行します
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  tokenName: HackToken
                  tokenVersion: '1.0'
                  tokenSymbol: SEC
                  tokenTotalSupply: '1000'
                  decimals: 1
                  serviceWallet: 0x9193ab3DCadc8DJS1A0ed19CB0395247f387222c
              properties:
                name:
                  type: string
                  minLength: 1
                version:
                  type: string
                  minLength: 1
                symbol:
                  type: string
                  minLength: 1
                totalSupply:
                  type: string
                  minLength: 1
                decimals:
                  type: number
                serviceWallet:
                  type: string
                  minLength: 1
              required:
                - name
                - version
                - symbol
                - totalSupply
                - decimals
                - serviceWallet
            examples:
              HackTokenを発行:
                value:
                  tokenName: HackToken
                  tokenVersion: '1.0'
                  tokenSymbol: SEC
                  tokenTotalSupply: '1000'
                  decimals: 0
                  serviceWallet: 0x9193ab3DCadc8DJS1A0ed19CB0395247f387222c
        description: ''
      tags:
        - Token
  /info/status:
    get:
      summary: システムの動作確認
      tags:
        - System
      responses:
        '200':
          description: OK
      operationId: get-status
      description: |-
        システムが動作している場合に応答を返します
        このエンドポイントへは認証なしで呼び出すことが可能です
      x-internal: false
      security: [ ]
    parameters: [ ]
  '/token/{address}/mint':
    post:
      summary: 指定したWalletへTokenを発行する
      operationId: 'post-token-:address-mint'
      responses:
        '200':
          description: |-
            TX Hashを返します
            このHashはネットワーク上でのHashではなくシステム上でのものです
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: object
                properties:
                  realyTransactionHash:
                    type: string
                    description: RelayerのTransaction Hach
      description: |-
        指定したWalletへTokenを発行します
        このときトークンはServiceWalletから送信され、TokenのTotalSupplyを超えて発行することはできません
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  toAddress: '0x0'
                  value: 13
              properties:
                toAddress:
                  type: string
                  minLength: 1
                  description: 発行先のWalletアドレス
                value:
                  type: number
                  description: 発行する量
              required:
                - toAddress
                - value
            examples:
              発行の例:
                value:
                  toAddress: '0x9193ab3DCadc8F0B1A0ed19CB0395247f387222c'
                  value: 13
        description: ''
      tags:
        - Token
    parameters:
      - schema:
          type: string
        name: address
        in: path
        required: true
        description: 送信するTokenのアドレス
  '/token/{address}/transfer':
    parameters:
      - schema:
          type: string
        name: address
        in: path
        required: true
        description: 移動するTokenのアドレス
    post:
      summary: Wallet間でTokenを移動する
      operationId: post-token-transfer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  'fromAddress:':
                    type: string
                    minLength: 1
                  toAddress:
                    type: string
                    minLength: 1
                  value:
                    type: number
                required:
                  - 'fromAddress:'
                  - toAddress
                  - value
                x-examples:
                  example-1:
                    'fromAddress:': '0x9193ab3DCadc8F0B1A0ed19CB0395247f387222c'
                    toAddress: '0x9193ab3DCadc8F0B1A0ed19CB0395247f387222c'
                    value: 10
              examples:
                Example-1:
                  value:
                    'fromAddress:': '0x9193ab3DCadc8F0B1A0ed19CB0395247f387222c'
                    toAddress: '0x9193ab3DCadc8F0B1A0ed19CB0395247f387222c'
                    value: 10
      tags:
        - Token
  '/token/{address}/{walletAddress}/balance':
    parameters:
      - schema:
          type: string
        name: address
        in: path
        required: true
        description: Tokenのアドレス
      - schema:
          type: string
        name: walletAddress
        in: path
        required: true
        description: Walletのアドレス
    get:
      summary: WalletのToken残高を取得する
      operationId: get-token-address-walletAddress-balance
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
      tags:
        - Token
  /service:
    get:
      summary: サービスの一覧を取得する
      tags:
        - Service
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      operationId: get-service-create
      description: システム上にあるサービスの一覧を取得します
      x-internal: true
    parameters: [ ]
  '/service/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: service Id
    get:
      summary: 指定したサービスの情報を取得する
      tags:
        - Service
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      operationId: get-service-id
      description: 指定したサービスの情報を取得します
    delete:
      summary: 指定したサービスを削除する
      operationId: delete-service-id
      responses:
        '200':
          description: OK
      x-internal: true
      description: 指定したサービスを削除します
      tags:
        - Service
  '/service/{id}/balance':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: service Id
    get:
      summary: ServiceWalletの残高を取得する
      tags:
        - Service
      responses:
        '200':
          description: |-
            ServiceWalletの残高を取得します
            ServiceWalletに対して送金することで残高を増やしてください
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      operationId: get-service-id
      description: 指定したサービスの情報を取得します
  '/service/{id}/deposit':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: service Id
    get:
      summary: GASTankのGAS残高を取得する
      tags:
        - Service
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      operationId: get-service-id
      description: ''
    post:
      summary: GASTankにGASを預ける
      operationId: post-service-id-deposit
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                value:
                  type: number
              required:
                - value
              x-examples:
                example-1:
                  value: 13
      tags:
        - Service
  '/wallet/{address}':
    parameters:
      - schema:
          type: string
        name: address
        in: path
        required: true
        description: Walletのアドレス
    get:
      summary: 指定したWalletの情報を取得する
      tags:
        - Wallet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
      operationId: get-service-id
      description: 指定したWalletの情報を取得します
  /wallet:
    get:
      summary: Walletの一覧を取得する
      tags:
        - Wallet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wallet'
      operationId: get-wallet
    post:
      summary: Walletを作成する
      operationId: post-wallet
      responses:
        '200':
          description: |-
            発行されたWalletが返却されます
            必ずWalletAddressをシステム側で保存してください
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
      description: User用の新規Walletを作成します
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                serviceId:
                  type: string
                  minLength: 1
              required:
                - serviceId
              x-examples:
                example-1:
                  serviceId: s
        description: Walletと結びつけるServiceIdを指定してください
      tags:
        - Wallet
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      properties:
        id:
          type: integer
          description: 自動生成される一意のid
        userName:
          type: string
          description: 共同developerの招待などに使用
        email:
          type: string
          format: email
        createDate:
          type: string
          format: date
          description: User作成日
        password:
          type: string
          description: |
            PasswordのHash
      required:
        - id
        - userName
        - email
        - password
    Token:
      title: Token
      type: object
      description: ''
      properties:
        address:
          type: integer
        name:
          type: string
        totalSupply:
          type: string
          description: Tokenの総流通量
        symbol:
          type: string
          description: 'Tokenの単位 ex) HACK, ETH'
        version:
          type: string
          description: TokenのVersion
        decimals:
          type: string
          description: Tokenの小数点以下桁数
        created_at:
          type: string
        serviceWallet:
          type: string
          description: Tokenを管理するServiceWallet
      required:
        - address
        - name
        - totalSupply
        - symbol
        - version
        - decimals
        - created_at
    Wallet:
      description: ''
      type: object
      properties:
        address:
          type: string
          minLength: 1
        service:
          type: string
          minLength: 1
        created_at:
          type: string
          minLength: 1
      required:
        - address
        - service
        - created_at
      x-examples:
        example-1:
          address: ewWallet.address
          service: newWallet.service
          created_at: newWallet.created_at
    Service:
      description: ''
      type: object
      properties:
        id:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
        serviceWallet:
          type: string
          minLength: 1
        created_at:
          type: string
          minLength: 1
        updated_at:
          type: string
          minLength: 1
      required:
        - id
        - name
        - serviceWallet
        - created_at
        - updated_at
      x-examples:
        example-1:
          id: string
          name: string
          serviceWallet: string
          created_at: string
          updated_at: string
      title: Service
  securitySchemes:
    認証方法:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://dev-xe71ik8z.us.auth0.com/oauth/token'
          scopes:
            read:wallet: Read wallet
            create:wallet: Create wallet
            read:service: Read service info
            create:token: Create new token
            read:token: read token info
            transfer:token: Transfer token
            issue:token: Issue token
            delete:wallet: Delete wallet
      description: |
        SeknotではOAuth2.0を用いた認証を採用しています。  
        OAuthを用いた認証方法に関してはサンプルコードをご参照ください。
